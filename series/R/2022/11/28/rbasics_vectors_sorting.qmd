---
title: "Refining R Vectors and Essential Sorting Techniques"
date: "2022-11-28"
author: NING LI
license: CC BY-NC
categories: [R Basic, Vectors, Sorting]
description: "Learn essential R programming skills - creating, manipulating, and sorting vectors, performing arithmetic, and finding max/min elements."
image: https://images.unsplash.com/photo-1587612049655-c1030366a74a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8U29ydGluZ3xlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60
code-fold: false
code-line-numbers: false
editor: visual
---

In today's blog, we'll delve into two fundamental R concepts: vectors and sorting. Both are crucial when dealing with data, and a good understanding of these will lay a solid foundation for more complex data operations.

# R Vectors

A vector in R is a basic data structure that stores an ordered set of similar data types. They can hold numeric value, character values, or logical values (TRUE or FALSE). Let's learn how to create, access and manipulate them.

## Creating Numeric and Character Vectors

Creating vectors is straightforward. Use the `c()` function, which stand for " combine".

```{r}
#| label: creating_numeric_and_character_vectors
#| eval: false

# Number Vector
codes <- c(380, 124, 818)
codes

# Character Vector
country <- c("italy", "canada", "egypt")
country
```

## Naming the Elements of a Vector

-   Using `names()` function

    ```{r}
    #| label: naming_by_names_function
    #| eval: false

    codes <- c(380, 124, 818)
    country <- c("italy", "canada", "egypt")
    names(codes) <- country
    ```

-   Using `c()` function

    ```{r}
    #| label: naming_by_c()_function
    #| eval: false

    # Note that two lines of code below have the same result
    codes <- c(italy = 380, canada = 124, egypt = 818)
    codes <- c("italy" = 380, "canada" = 124, "egypt" = 818)

    ```

## Generating Numeric Sequences

For generating a sequence of numbers, use `seq()` or `:` operator.

```{r}
#| label: generating_numeric_sequences
#| eval: false

# Using seq()
sequence <- seq(from = 1, to = 10, by =2)
sequence 

# Using :
sequemce <- 1:10
sequemce

```

## Accessing Specific Elements or Parts of a Vector

To access specific elements in a vector, use brackets `[]` and specify the index.

```{r}
#| label: access_vector
#| eval: false

# Using square bracket to access specific elements of a vector
codes[2]
codes[c(1, 3)]
codes[1:2]

# If the entries of a vector are named, they may be accessed by referring to their name
codes["canada"]
codes[c("egypt", "italy")]
```

## Coercing Data into Different Types

Data coercion is the process of converting data from one type to another. Below are some common R functions used for coercion:

1.  **`as.numeric()`**: Converts to numeric type.

    ```{r}
    #| label: convert_to_numeric_type
    #| eval: false

    char_vector <- c("1", "2", "3")
    num_vector <- as.numeric(char_vector)
    print(num_vector)

    # verify a data type
    class(num_vector)
    ```

2.  **`as.character()`**: Converts to character type.

    ```{r}
    #| label: convert_to_character_type
    #| eval: false

    num_vector <- c(1, 2, 3)
    char_vector <- as.character(num_vector)
    print(char_vector)
    ```

3.  **`as.factor()`**: Converts to factor type.

    ```{r}
    #| label: convert_to_factor_type
    #| eval: false

    char_vector <- c("male", "female", "male")
    factor_vector <- as.factor(char_vector)
    print(factor_vector)
    ```

4.  **`as.integer()`**: Converts to integer type.

    ```{r}
    #| label: convert_to_integer_type
    #| eval: false

    num_vector <- c(1.2, 2.5, 3.7)
    int_vector <- as.integer(num_vector)
    print(int_vector)
    ```

5.  **`as.logical()`**: Converts to logical type.

    Any non-zero numeric value will be converted to TRUE and zero will be converted to FALSE. For character vectors, "TRUE" will be converted to TRUE and anything else will be converted to FALSE.

    ```{r}
    #| label: convert_to_logical_type
    #| eval: false

    num_vector <- c(1, 0, 2)
    logical_vector <- as.logical(num_vector)
    print(logical_vector)
    ```

::: callout-important
You can also coerce matrices and data frames to other types using these same functions. But remember that when coercing complex types like lists or data frames, every element must be convertible to the final type, or the operation will result in an error or NA values.
:::

### Question

1.  why class(3L) is integer ?

2.  why 3L-3 equals 0 ?

# R Sorting

Sorting is an important operation when working with data in R. It helps organize data in a way that's easier to understand and analyze.

## Sorting Vectors

To sort a vector in ascending or descending order, you can use the `sort()` function.

```{r}
#| label: sort_vector
#| eval: false

# load package and dataset
library(dslabs)
data(murders)

# Sorting
x <- sort(murders$total) # puts elements in order

# Descending order
y <- sort(murders$total, decreasing = TRUE) # put elements from big to small
```

## Finding Indices of Sorted Elements

If you want to get the indices of the sorted elements (rather than the sorted elements themselves), you can use the `order()` function.

```{r}
#| label: finding_indices_of_sorted_elements
#| eval: false

index <- order(x) # returns index that will put x in order
x[index] # rearrange by this index puts elements in order
order(x)

index <- order(murders$total) # order murder numbers by small to big
murders$abb[index] # order abbreviations by total murders
```

## Finding Maxima and Minima

R provides function `max()`, `min()`, `which.max()`, and `which.min()` to find the maximum and minimum elements and their indices:

```{r}
#| label: find_maxima&minima
#| eval: false

# Max and Min
max_value <- max(murders$total) # return the largest elements
max_value

min_value <- min(murders$total) # return the smallest elements
min_value

# Indices of Max and Min
max_index <- which.max(murders$total) # index with highest number of murders(第几个数字最大)
max_index # 第5个数字最大
murders$state[max_index] # state name with highest number of total murders

min_index <- which.min(murders$total) 
min_index # 第46个数字最小
murders$state[min_index] # state name with lowest number of total murders
```

## Ranking Elements

The rank function provides the ranks of the elements in a vector:

```{r}
#| label: ranking_elements_of_vector
#| eval: false

rank(murders$population) 
```

::: {#sort_order_rank}
|          |      |       |      |
|----------|------|-------|------|
| Original | Sort | Order | Rank |
| 31       | 4    | 2     | 3    |
| 4        | 15   | 3     | 1    |
| 15       | 31   | 1     | 2    |
| 92       | 65   | 5     | 5    |
| 65       | 92   | 4     | 4    |

: The Differences of Sort, Order and Rank {#tbl-letters}
:::

::: {#tips_for_sort_order_rank .callout-tip}
Explanation of @tbl-letters

-   Sort: 按从小到大排列

-   Order: Sort对应数字在原来数字排列中的顺序

-   Rank: Original原来数字在Sort顺序中的排名
:::

## Vector Arithmetic

You can perform arithmetic operations between vectors and number, as well as between vectors themselves.

## Arithmetic with a Single Number

You can perform an operation between a vector and a single number, which applies the operation to each element of the vector:

```{r}
#| label: arithmetic_with_single_number
#| eval: false

# Adding 2 to all elements of a vector
new_vec <- codes +2
new_vec
```

## Arithmetic with Two Vectors

You can also perform arithmetic operations between two vectors of the same length:

```{r}
#| label: arithmetic_with_two_vectors
#| eval: false

# Addition of two vectors
vec1 <- c(1,2,3)
vec2 <- c(4,5,6)
result <- vec1 + vec2 # we add two vectors element-wise 
print(result)
```

## Example for Vector Arithmetic by Murders dataset

```{r}
#| label: example_for_vector_arithmetic
#| eval: false

# The name of the state with the maximum population is found by doing the following
murders$state[which.max(murders$population)]

# how to obtain the murder rate
murder_rate <- murders$total / murders$population * 100000

# ordering the states by murder rate, in decreasing order
murders$state[order(murder_rate, decreasing=TRUE)]
```

# Conclusion

To sum up, the deeper understanding of these concepts of vectors and sorting in R will be significantly beneficial for your data analysis journey. You will encounter these operations frequently, and mastering them will make your data manipulation tasks easier and more efficient.

```{=html}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Social share button</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/all.min.css" integrity="sha512-q3eWabyZPc1XTCmF+8/LuE1ozpg5xxn7iO89yfSOd5/oKvyqLngoNGsx8jq92Y8eXJ/IRxQbEC+FGSYxtk2oiw==" crossorigin="anonymous" referrerpolicy="no-referrer">
    <style>
        #share-buttons {
            display: flex;
            justify-content: center;
            height: 8vh;
        }

        #share-container span {
            display: block;
            margin: 3rem auto;
            font-size: 50px;
            padding: 1rem;
            margin: 1rem;
        }

        #share-buttons i {
            font-size: 30px;
            margin: 10px;
        }

        .facebook {
            color: #3b5998;
        }

        .twitter {
            color: #55acee;
        }

        .linkedin {
            color: #0077b5;
        }

        .reddit {
            color: #cb2027;
        }

        .whatsapp {
            color: #25D366;
        }

        .telegram {
            color: #229ED9;
        }

        .weibo {
            color: #e6162d;
        }

        .facebook,
        .twitter,
        .linkedin,
        .reddit,
        .whatsapp,
        .telegram,
        .weibo {
            opacity: 0.6;
        }

        .facebook:hover,
        .twitter:hover,
        .linkedin:hover,
        .reddit:hover,
        .whatsapp:hover,
        .telegram:hover,
        .weibo:hover {
            opacity: 0.9;
        }
    </style>
</head>

<body>
    <div id="share-buttons">
        <!-- facebook -->
        <a class="facebook" target="_blank"><i class="fab fa-facebook"></i></a>

        <!-- twitter -->
        <a class="twitter" target="_blank"><i class="fab fa-twitter"></i></a>

        <!-- linkedin -->
        <a class="linkedin" target="_blank"><i class="fab fa-linkedin"></i></a>

        <!-- reddit -->
        <a class="reddit" target="_blank"><i class="fab fa-reddit"></i></a>

        <!-- whatsapp -->
        <a class="whatsapp" target="_blank"><i class="fab fa-whatsapp"></i></a>

        <!-- telegram -->
        <a class="telegram" target="_blank"><i class="fab fa-telegram"></i></a>

        <!-- weibo -->
        <a class="weibo" target="_blank"><i class="fab fa-weibo"></i></a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const link = encodeURI(window.location.href);
            const msg = encodeURIComponent("📣🔥Don't miss out on this epic adventure—click the share button and let the world in on the awesomeness! 💥🌍 #MustReadBlog #PrepareToBeAmazed");
            const title = encodeURIComponent('🚀📚【独家爆料】你绝对不能错过的博客文章！让你的眼界瞬间翻转，知识涨停！🔥💡 快来一起探索这个引人入胜的世界吧！点击分享按钮，让更多人一同领略这篇魔幻之旅！✨🌍 #必读博客 #准备被惊艳到');

            const fb = document.querySelector('.facebook');
            fb.href = `https://www.facebook.com/share.php?u=${link}`;

            const twitter = document.querySelector('.twitter');
            twitter.href = `http://twitter.com/share?&url=${link}&text=${msg}&hashtags=datascience,Rlangauge,R_programming,python,statistics`;

            const linkedIn = document.querySelector('.linkedin');
            linkedIn.href = `https://www.linkedin.com/sharing/share-offsite/?url=${link}`;

            const reddit = document.querySelector('.reddit');
            reddit.href = `http://www.reddit.com/submit?url=${link}&title=${title}`;

            const whatsapp = document.querySelector('.whatsapp');
            whatsapp.href = `https://api.whatsapp.com/send?text=${msg}: ${link}`;

            const telegram = document.querySelector('.telegram');
            telegram.href = `https://telegram.me/share/url?url=${link}&text=${msg}`;

            const weibo = document.querySelector('.weibo');
            weibo.href = `http://service.weibo.com/share/share.php?url=${link}&title=${title}`;
        });
    </script>
</body>
</html>

```
