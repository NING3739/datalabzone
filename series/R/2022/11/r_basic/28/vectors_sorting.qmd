---
title: "Vectors and Sorting"
date: "2022-11-28"
author: NING LI
categories: [R Basic, Vectors, Sorting]
description: "The course covers vectors and sorting functions in R. It includes creating and manipulating vectors of different types, sorting vectors, finding maximum and minimum elements, and performing arithmetic operations between vectors and numbers."
image: https://images.unsplash.com/photo-1587612049655-c1030366a74a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8U29ydGluZ3xlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60
code-fold: false
editor: visual
---

# Vectors, Sorting

In this section, I will introduce you to vectors and functions such as sorting.

In Vectors, you will:

-   Create numeric and character vectors.

-   Name the columns of a vector.

-   Generate numeric sequences.

-   Access specific elements or parts of a vector.

-   Coerce data into different data types as needed.

In Sorting, you will:

-   Sort vectors in ascending and descending order.

-   Extract the indices of the sorted elements from the original vector.

-   Find the maximum and minimum elements, as well as their indices, in a vector.

-   Rank the elements of a vector in increasing order.

In Vector Arithmetic, you will:

-   Perform arithmetic between a vector and a single number.

-   Perform arithmetic between two vectors of the same length.

## Vectors

### Key points

-   The function c(), which stands for concatenate, is useful for creating vectors.

-   Another useful function for creating vectors is the seq() function, which generates sequences.

-   Subsetting lets us access specific parts of a vector by using square brackets to access elements of a vector.

### Code

```{r, eval=FALSE}
# We may create vectors of class numeric or character with the concatenate function
codes <- c(380, 124, 818)
country <- c("italy", "canada", "egypt")

# We can also name the elements of a numeric vector
# Note that the two lines of code below have the same result
codes <- c(italy = 380, canada = 124, egypt = 818)
codes <- c("italy" = 380, "canada" = 124, "egypt" = 818)

# We can also name the elements of a numeric vector using the names() function
codes <- c(380, 124, 818)
country <- c("italy","canada","egypt")
names(codes) <- country

# Using square brackets is useful for subsetting to access specific elements of a vector
codes[2]
codes[c(1,3)]
codes[1:2]

# If the entries of a vector are named, they may be accessed by referring to their name
codes["canada"]
codes[c("egypt","italy")]
```

## Vector Coercion

### Key Point

-   In general, coercion is an attempt by R to be flexible with data types by guessing what was meant when an entry does not match the expected. For example, when defining x as

```{r, eval=FALSE}
    x <- c(1, "canada", 3)
```

R coerced the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings, "1" and "3".

-   The function `as.character()` turns numbers into characters.

-   The function `as.numeric()` turns characters into numbers.

-   In R, missing data is assigned the value `NA`.

### Question

1.  class(3L) is integer ?
2.  3L-3 equals 0 ?

## Sorting

|          |                       |                                            |                                           |
|-----------------|-----------------|-------------------|-------------------|
| Original | Sort(按从小到大排列） | Order(Sort对应数字在原来数字排列中的顺序） | Rank(Original原来数字在Sort顺序中的排名） |
| 31       | 4                     | 2                                          | 3                                         |
| 4        | 15                    | 3                                          | 1                                         |
| 15       | 31                    | 1                                          | 2                                         |
| 92       | 65                    | 5                                          | 5                                         |
| 65       | 92                    | 4                                          | 4                                         |

### Key Points

-   The function `sort()` sorts a vector in increasing order.

-   The function `order()` produces the indices needed to obtain the sorted vector, e.g. a result of 2 3 1 5 4 means the sorted vector will be produced by listing the 2nd, 3rd, 1st, 5th, and then 4th item of the original vector.

-   The function `rank()` gives us the ranks of the items in the original vector.

-   The function `max()` returns the largest value, while `which.max()` returns the index of the largest value. The functions `min()` and `which.min()` work similarly for minimum values.

### Code

```{r, eval=FALSE}
library(dslabs)
data(murders)
sort(murders$total)

x <- c(31, 4, 15, 92, 65)
x
sort(x)    # puts elements in order

index <- order(x)    # returns index that will put x in order
x[index]    # rearranging by this index puts elements in order
order(x)

murders$state[1:10]
murders$abb[1:10]

index <- order(murders$total)
murders$abb[index]    # order abbreviations by total murders

max(murders$total)    # highest number of total murders
i_max <- which.max(murders$total)    # index with highest number of murders
murders$state[i_max]    # state name with highest number of total murders

x <- c(31, 4, 15, 92, 65)
x
rank(x)    # returns ranks (smallest to largest)
```

## Vector Arithmetic

### Key Point

-   In R, arithmetic operation on vectors occur element-wise

### Code

```{r, eval=FALSE}
# The name of the state with the maximum population is found by doing the following
murders$state[which.max(murders$population)]

# how to obtain the murder rate
murder_rate <- murders$total / murders$population * 100000

# ordering the states by murder rate, in decreasing order
murders$state[order(murder_rate, decreasing=TRUE)]
```
